#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output

# Heroku-provided params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

# Default configuration which you can change by setting environment variables
# e.g. heroku config:set CLEAR_CACHE=1
GHC_VER=7.8.2
CABAL_VER=1.20.0.0
PREBUILT=https://s3.amazonaws.com/heroku-ghc
CLEAR_CACHE=0
#############################################################################

export_env_dir() {
  local env_dir=${1:-$ENV_DIR}
  local whitelist_regex=${2:-''}
  local blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|BUILDPACK_URL)$'}

  if [ -d "$env_dir" ]; then
    echo "-----> Exporting config vars"
    for e in $(ls "$env_dir"); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      echo "       $e" &&
      export "$e=$(cat "$env_dir/$e")"
      :
    done
  fi
}

export_env_dir

WORKING_HOME=/app

PROFILE_PATH="$BUILD_DIR/.profile.d/haskell.sh"

if [[ $CLEAR_CACHE -eq 1 ]] ; then
  echo "-----> Clearing the buildpack cache"
  rm -fr "$CACHE_DIR/"
fi

if [[ -n $EXTERNAL_CACHE ]] ; then
  echo "-----> Clearing the buildpack cache"
  rm -fr "$CACHE_DIR/"
  mkdir "$CACHE_DIR"

  echo "-----> Retrieving external cache: $EXTERNAL_CACHE"
  curl "$EXTERNAL_CACHE" | tar zxf - -C "$CACHE_DIR"
fi

mkdir -p "$CACHE_DIR/download"
mkdir -p "$WORKING_HOME/vendor"
mkdir -p "$(dirname "$PROFILE_PATH")"

function install_prebuilt {
  PKG=$1
  VER=$2

  if [ ! -e "$CACHE_DIR/$PKG" ]; then
    PKG_URL="$PREBUILT/heroku-$PKG-$VER.tar.gz"
    if curl --output /dev/null --silent --head --fail "$PKG_URL"; then
      echo "-----> Downloading and caching prebuilt $PKG binaries and shared data"
      mkdir -p "$CACHE_DIR/$PKG"
      curl -# -L "$PKG_URL" | tar xz -C "$CACHE_DIR/$PKG"

      echo "-----> Installing $PKG"
      cp -R "$CACHE_DIR/$PKG/." "$WORKING_HOME/vendor/ghc-utils"
    else
      echo "-----> Could not find prebuilt $PKG $VER (you may have problems later)"
    fi
  else
    echo "-----> Restoring cached $PKG"
    cp -R "$CACHE_DIR/$PKG/." "$WORKING_HOME/vendor/ghc-utils"
  fi
}

function install_prebuilt_library {
  NAME=$1
  VER=$2
  SOURCE_URL=$3
  SOURCE_DIR=$4
  FLAGS=$5
  if [ ! -e "$CACHE_DIR/$NAME-$VER" ]; then
    PREBUILT_LIB_URL="$PREBUILT/heroku-$NAME-$VER.tar.gz" # contains ghc-libs and ghc-includes directories
    if curl --output /dev/null --silent --head --fail "$PREBUILT_LIB_URL"; then
      echo "-----> Installing prebuilt $NAME-$VER into cache"
      mkdir -p "$CACHE_DIR/$NAME-$VER"
      curl -# -L "$PREBUILT_LIB_URL" | tar xz -C "$CACHE_DIR/$NAME-$VER"
    else
      echo "-----> Could not find prebuilt $NAME-$VER"
      if [ ! -e "$CACHE_DIR/download/$SOURCE_DIR" ]; then
        echo "-----> Downloading $NAME"
        if [[ "$SOURCE_URL" =~ bz2$ ]]; then
          curl -# -L "$SOURCE_URL" | bunzip2 | tar x -C "$CACHE_DIR/download"
        else
          curl -# -L "$SOURCE_URL" | tar xz -C "$CACHE_DIR/download"
        fi
      fi
      echo "-----> Installing $NAME into cache"
      mkdir -p "$CACHE_DIR/$NAME-$VER/ghc-libs"
      mkdir -p "$CACHE_DIR/$NAME-$VER/ghc-includes"
      mkdir -p "$CACHE_DIR/$NAME-$VER/build"
      cd "$CACHE_DIR/download/$SOURCE_DIR"
      ./configure $FLAGS "--prefix=$CACHE_DIR/$NAME-$VER/build" "--libdir=$CACHE_DIR/$NAME-$VER/ghc-libs" "--includedir=$CACHE_DIR/$NAME-$VER/ghc-includes"
      make install
      # Remove unnecessary files
      rm -rf "$CACHE_DIR/$NAME-$VER/build"
      find "$CACHE_DIR/$NAME-$VER/ghc-libs" -xtype f -not -name '*.so*' -print0| xargs -0 -r rm
      find "$CACHE_DIR/$NAME-$VER/ghc-includes" -xtype f -not -name '*.h*' -print0| xargs -0 -r rm
    fi
  fi
  echo "-----> Restoring $NAME files from cache"
  find "$CACHE_DIR/$NAME-$VER/ghc-libs/" -exec cp -rP '{}' "$WORKING_HOME/vendor/ghc-libs/" \;         # alternate/quiet form of: cp -P $CACHE_DIR/$NAME-$VER/ghc-libs/* $WORKING_HOME/vendor/ghc-libs/
  find "$CACHE_DIR/$NAME-$VER/ghc-includes/" -exec cp -rP '{}' "$WORKING_HOME/vendor/ghc-includes/" \; # alternate/quiet form of: cp -P $CACHE_DIR/$NAME-$VER/ghc-includes/* $WORKING_HOME/vendor/ghc-includes/
}

# Usage: $ set-env key value
function set-env (){
  echo "export $1=$2" >> "$PROFILE_PATH"
}

# Usage: $ set-default-env key value
function set-default-env (){
  echo "export $1=\${$1:-$2}" >> "$PROFILE_PATH"
}

mkdir -p "$WORKING_HOME/vendor/ghc-libs"
mkdir -p "$WORKING_HOME/vendor/ghc-utils"
mkdir -p "$WORKING_HOME/vendor/ghc-includes"
echo "-----> Linking libncurses.so in an accessible place"
ln -s /usr/lib/libncurses.so.5 "$WORKING_HOME/vendor/ghc-libs/libtinfo.so.5"

LIBFFI_URL="ftp://sourceware.org/pub/libffi/libffi-3.0.13.tar.gz"
install_prebuilt_library "libffi" "3.0.13" $LIBFFI_URL "libffi-3.0.13" "--enable-static=no"
if [ -e "$CACHE_DIR/libffi-3.0.13/libs" ]; then
  echo "-----> Move libffi files into the correct locations" # See https://github.com/atgreen/libffi/issues/55 & https://github.com/atgreen/libffi/issues/24
  rm -rf "$CACHE_DIR"/libffi-3.0.13/ghc-libs/*
  mv "$CACHE_DIR"/libffi-3.0.13/libs/*.so* "$CACHE_DIR"/libffi-3.0.13/ghc-libs/
  mv "$CACHE_DIR"/libffi-3.0.13/libs/*.h "$CACHE_DIR"/libffi-3.0.13/ghc-includes/
  cp "$CACHE_DIR"/libffi-3.0.13/ghc-libs/* "$WORKING_HOME"/vendor/ghc-libs/
  cp "$CACHE_DIR"/libffi-3.0.13/ghc-includes/* "$WORKING_HOME"/vendor/ghc-includes/
  rm -rf "$CACHE_DIR/libffi-3.0.13/libs"
fi

LIBPCRE_URL="http://iweb.dl.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz"
install_prebuilt_library "libpcre" "8.35" "$LIBPCRE_URL" "pcre-8.35" "--enable-silent-rules --enable-static=no --disable-cpp"

LIBGMP_URL="https://gmplib.org/download/gmp/gmp-6.0.0a.tar.bz2"
install_prebuilt_library "libgmp" "6.0.0a" "$LIBGMP_URL" "gmp-6.0.0"

export LANG=en_US.UTF-8
export "C_INCLUDE_PATH=$WORKING_HOME/vendor/ghc-includes:/usr/include:$C_INCLUDE_PATH"
export "LIBRARY_PATH=$WORKING_HOME/vendor/ghc-libs:/usr/lib:$LIBRARY_PATH"
export "LD_LIBRARY_PATH=$LIBRARY_PATH"
export "PATH=$WORKING_HOME/vendor/ghc-$GHC_VER/bin:$WORKING_HOME/vendor/cabal-install-$CABAL_VER/bin:$WORKING_HOME/vendor/ghc-utils/bin:$WORKING_HOME/.cabal-sandbox/bin:$PATH"

########## GHC #####################################################
if [ ! -e "$CACHE_DIR/ghc-$GHC_VER" ]; then
  PREBUILT_GHC_URL="$PREBUILT/heroku-ghc-$GHC_VER.tar.gz"
  if curl --output /dev/null --silent --head --fail "$PREBUILT_GHC_URL"; then
    echo "-----> Installing prebuilt GHC $GHC_VER"
    curl -# -L "$PREBUILT_GHC_URL" | tar zx -C "$WORKING_HOME/vendor"
  else
    echo "-----> Could not find prebuilt GHC $GHC_VER"
    if [ ! -e "$CACHE_DIR/download/ghc-$GHC_VER" ]; then
      GHC_URL="http://www.haskell.org/ghc/dist/$GHC_VER/ghc-$GHC_VER-x86_64-unknown-linux-deb7.tar.bz2"
      echo "-----> Downloading GHC $GHC_VER"
      curl -# -L "$GHC_URL" | bunzip2 | tar x -C "$CACHE_DIR/download"
    fi
    echo "-----> Installing GHC $GHC_VER"
    cd "$CACHE_DIR/download/ghc-$GHC_VER"
    ./configure --prefix "$WORKING_HOME/vendor/ghc-$GHC_VER"
    make install
  fi
  echo "-----> Caching GHC $GHC_VER binaries"
  cp -R "$WORKING_HOME/vendor/ghc-$GHC_VER" "$CACHE_DIR"
else
  echo "-----> Restoring cached GHC $GHC_VER binaries"
  rm -fr "$WORKING_HOME/vendor/ghc-$GHC_VER"
  cp -R "$CACHE_DIR/ghc-$GHC_VER" $WORKING_HOME/vendor
fi

install_prebuilt "happy" "1.19.3"
install_prebuilt "alex" "3.1.3"
install_prebuilt "cpphs" "1.18.4"

########## cabal-install ###########################################
if [ ! -e "$CACHE_DIR/cabal-install-$CABAL_VER" ]; then
  PREBUILT_CABAL_URL="$PREBUILT/heroku-cabal-install-$CABAL_VER.tar.gz"
  if curl --output /dev/null --silent --head --fail "$PREBUILT_CABAL_URL"; then
    echo "-----> Installing prebuilt cabal-install $CABAL_VER"
    curl -# -L "$PREBUILT_CABAL_URL" | tar zx -C "$WORKING_HOME/vendor"
  else
    echo "-----> Could not find prebuilt cabal-install $CABAL_VER"
    if [ ! -e "$CACHE_DIR/download/cabal-install-$CABAL_VER" ]; then
      CABAL_URL="http://www.haskell.org/cabal/release/cabal-install-$CABAL_VER/cabal-install-$CABAL_VER.tar.gz"
      echo "-----> Downloading cabal-install $CABAL_VER"
      curl -# -L "$CABAL_URL" | tar zx -C "$CACHE_DIR/download"
    fi

    echo "-----> Installing cabal-install $CABAL_VER"
    cd "$CACHE_DIR/download/cabal-install-$CABAL_VER"
    export "PREFIX=$WORKING_HOME/vendor/cabal-install-$CABAL_VER"

    ./bootstrap.sh
  fi

  echo "-----> Caching cabal $CABAL_VER binaries"
  cp -R "$WORKING_HOME/vendor/cabal-install-$CABAL_VER" "$CACHE_DIR"
else
  echo "-----> Restoring cached cabal $CABAL_VER binaries"
  cp -R "$CACHE_DIR/cabal-install-$CABAL_VER" "$WORKING_HOME/vendor"
fi

########## project build ###########################################

cd "$WORKING_HOME"
cabal sandbox init

cd "$BUILD_DIR"
cabal sandbox init --sandbox "$WORKING_HOME/.cabal-sandbox"

if [ -e "$CACHE_DIR/.cabal-sandbox" ]; then
  echo "-----> Restoring cached cabal sandbox"
  rm -fr "$WORKING_HOME/.cabal-sandbox"
  cp -R "$CACHE_DIR/.cabal-sandbox" "$WORKING_HOME"
fi

echo "-----> Getting newest list of cabal packages"
cabal update

echo "-----> Installing user application"
cabal configure --disable-library-profiling --disable-executable-profiling --disable-tests --disable-library-coverage --disable-benchmarks --enable-executable-stripping --disable-split-objs || true
cabal install --only-dependencies --reorder-goals --disable-library-profiling --disable-tests --disable-library-coverage --disable-benchmarks --disable-documentation --disable-split-objs
cabal build -j

# Set context environment variables.
set-env PATH "/app/vendor/ghc-$GHC_VER/bin:/app/vendor/ghc-utils/bin:/app/vendor/cabal-install-$CABAL_VER/bin:$PATH"

set-default-env LANG en_US.UTF-8
set-default-env C_INCLUDE_PATH /app/vendor/ghc-includes:/usr/include
set-default-env LIBRARY_PATH /app/vendor/ghc-libs:/usr/lib
set-default-env LD_LIBRARY_PATH /app/vendor/ghc-libs:/usr/lib

echo "-----> Cleaning any source downloads from the build cache"
rm -fr "$CACHE_DIR/download"

echo "-----> Caching latest cabal sandbox"
rm -fr "$CACHE_DIR/.cabal-sandbox"
cp -R "$WORKING_HOME/.cabal-sandbox" "$CACHE_DIR"

echo "-----> Making GHC binaries available to Heroku command line"
mkdir -p "$BUILD_DIR/vendor"
mv "$WORKING_HOME/vendor/ghc-libs" "$BUILD_DIR/vendor"
mv "$WORKING_HOME/vendor/ghc-utils" "$BUILD_DIR/vendor"
mv "$WORKING_HOME/vendor/ghc-includes" "$BUILD_DIR/vendor"
mv "$WORKING_HOME/vendor/ghc-$GHC_VER" "$BUILD_DIR/vendor"
mv "$WORKING_HOME/vendor/cabal-install-$CABAL_VER" "$BUILD_DIR/vendor"

echo "-----> Making cabal config available to Heroku command line"
mv "$WORKING_HOME/.cabal" "$BUILD_DIR"

echo "-----> Making cabal sandbox available to Heroku command line"
cp -R "$WORKING_HOME/.cabal-sandbox" "$BUILD_DIR"
