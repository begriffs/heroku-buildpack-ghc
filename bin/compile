#!/bin/bash

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2

WORKING_HOME=/app

GHC_VER=7.6.3
CABAL_VER=1.18.0.2
CLEAR_CACHE=false
S3=https://s3.amazonaws.com/heroku-ghc

if $CLEAR_CACHE ; then
  rm -fr $CACHE_DIR/
fi

mkdir -p $CACHE_DIR/download
mkdir -p $WORKING_HOME/vendor

function install_prebuilt {
  BINARY=$1
  VER=$2

  if [ ! -e $CACHE_DIR/$BINARY ]; then
    BINARY_URL=$S3/heroku-$BINARY-$VER.gz
    if curl --output /dev/null --silent --head --fail $BINARY_URL; then
      echo "-----> Installing prebuilt $BINARY binary"
      curl -# -L $BINARY_URL | gunzip -c > $WORKING_HOME/vendor/ghc-$GHC_VER/bin/$BINARY
      chmod a+x $WORKING_HOME/vendor/ghc-$GHC_VER/bin/$BINARY

      echo "-----> Installing prebuilt $BINARY shared scripts"
      curl -# -L $S3/heroku-share-$BINARY-$VER.tar.gz | tar xz -C $WORKING_HOME/vendor/ghc-$GHC_VER/share

      echo "-----> Caching $BINARY"
      cp $WORKING_HOME/vendor/ghc-$GHC_VER/bin/$BINARY $CACHE_DIR
      cp -R $WORKING_HOME/vendor/ghc-$GHC_VER/share/$BINARY-$VER $CACHE_DIR
    else
      echo "-----> Could not find prebuilt $BINARY $VER (you may have problems later)"
    fi
  else
    echo "-----> Restoring cached $BINARY"
    cp $CACHE_DIR/$BINARY $WORKING_HOME/vendor/ghc-$GHC_VER/bin
    cp -R $CACHE_DIR/$BINARY-$VER $WORKING_HOME/vendor/ghc-$GHC_VER/share
  fi
}

########## GHC #####################################################
if [ ! -e $CACHE_DIR/ghc-$GHC_VER ]; then
  S3_GHC_URL=$S3/heroku-ghc-$GHC_VER.tar.gz
  if curl --output /dev/null --silent --head --fail $S3_GHC_URL; then
    echo "-----> Installing prebuilt GHC $GHC_VER"
    curl -# -L $S3_GHC_URL | tar zx -C $WORKING_HOME/vendor
  else
    echo "-----> Could not find prebuilt GHC $GHC_VER"
    if [ ! -e $CACHE_DIR/download/ghc-$GHC_VER ]; then
      GHC_URL="http://www.haskell.org/ghc/dist/$GHC_VER/ghc-$GHC_VER-x86_64-unknown-linux.tar.bz2"
      echo "-----> Downloading GHC $GHC_VER"
      curl -# -L "$GHC_URL" | bunzip2 | tar x -C $CACHE_DIR/download
    fi
    echo "-----> Installing GHC $GHC_VER"
    cd $CACHE_DIR/download/ghc-$GHC_VER
    ./configure --prefix $WORKING_HOME/vendor/ghc-$GHC_VER
    make install
  fi

  echo "-----> Caching GHC $GHC_VER binaries"
  cp -R $WORKING_HOME/vendor/ghc-$GHC_VER $CACHE_DIR
else
  echo "-----> Restoring cached GHC $GHC_VER binaries"
  rm -fr $WORKING_HOME/vendor/ghc-$GHC_VER
  cp -R $CACHE_DIR/ghc-$GHC_VER $WORKING_HOME/vendor
fi

mkdir -p $WORKING_HOME/vendor/ghc-libs
mkdir -p $WORKING_HOME/vendor/ghc-includes
echo "-----> Linking libgmp.so in an accessible place"
ln -s /usr/lib/libgmp.so.3 $WORKING_HOME/vendor/ghc-libs/libgmp.so

if [ ! -e $CACHE_DIR/libffi.so.6.0.1 ]; then
  S3_LIBFFI_URL=$S3/libffi.so.6.0.1
  if curl --output /dev/null --silent --head --fail $S3_LIBFFI_URL; then
    echo "-----> Installing prebuilt libffi"
    curl -# -L $S3_LIBFFI_URL > $WORKING_HOME/vendor/ghc-libs/libffi.so.6.0.1
  else
    echo "-----> Could not find prebuilt libffi"
    if [ ! -e $CACHE_DIR/download/libffi-3.0.13 ]; then
      FFI_URL="ftp://sourceware.org/pub/libffi/libffi-3.0.13.tar.gz"
      echo "-----> Downloading libffi"
      curl -# -L "$FFI_URL" | tar zx -C $CACHE_DIR/download
    fi
    echo "-----> Installing libffi"
    cd $CACHE_DIR/download/libffi-3.0.13
    ./configure
    make
    cp x86_64-unknown-linux-gnu/.libs/libffi.so.6.0.1 $WORKING_HOME/vendor/ghc-libs
  fi

  echo "-----> Caching libffi"
  cp $WORKING_HOME/vendor/ghc-libs/libffi.so.6.0.1 $CACHE_DIR
else
  echo "-----> Restoring cached libffi"
  cp $CACHE_DIR/libffi.so.6.0.1 $WORKING_HOME/vendor/ghc-libs
fi

echo "-----> Symlinking libffi"
ln -s $WORKING_HOME/vendor/ghc-libs/libffi.so.6.0.1 $WORKING_HOME/vendor/ghc-libs/libffi.so.6
ln -s $WORKING_HOME/vendor/ghc-libs/libffi.so.6.0.1 $WORKING_HOME/vendor/ghc-libs/libffi.so

if [ ! -e $CACHE_DIR/libpcre.so.1 ]; then
  S3_LIBPCRE_URL=$S3/libpcre.so.1
  if curl --output /dev/null --silent --head --fail $S3_LIBPCRE_URL; then
    echo "-----> Installing prebuilt libpcre"
    curl -# -L $S3_LIBPCRE_URL > $WORKING_HOME/vendor/ghc-libs/libpcre.so.1
  else
    echo "-----> Could not find prebuilt libpcre"
    if [ ! -e $CACHE_DIR/download/pcre-8.34 ]; then
      PCRE_URL="http://iweb.dl.sourceforge.net/project/pcre/pcre/8.34/pcre-8.34.tar.gz"
      echo "-----> Downloading libpcre"
      curl -# -L "$PCRE_URL" | tar zx -C $CACHE_DIR/download
    fi
    echo "-----> Installing libpcre"
    cd $CACHE_DIR/download/pcre-8.34
    ./configure
    make
    # for f in .libs/*; do
    #   echo "$f"
    # done
    #cp x86_64-unknown-linux-gnu/.libs/.libs/libpcre.so.1 $WORKING_HOME/vendor/ghc-libs
    cp .libs/libpcre.so $WORKING_HOME/vendor/ghc-libs
    cp .libs/libpcre.so.* $WORKING_HOME/vendor/ghc-libs
    cp pcre.h $WORKING_HOME/vendor/ghc-includes
  fi

  echo "-----> Caching libpcre"
  cp $WORKING_HOME/vendor/ghc-libs/libpcre.so $CACHE_DIR
  cp $WORKING_HOME/vendor/ghc-libs/libpcre.so.* $CACHE_DIR
  cp $WORKING_HOME/vendor/ghc-includes/pcre.h $CACHE_DIR
else
  echo "-----> Restoring cached libpcre"
  cp $CACHE_DIR/libpcre.so $WORKING_HOME/vendor/ghc-libs
  cp $CACHE_DIR/libpcre.so.* $WORKING_HOME/vendor/ghc-libs
  cp $CACHE_DIR/pcre.h $WORKING_HOME/vendor/ghc-includes
fi

# echo "-----> Symlinking libpcre"
# ln -s $WORKING_HOME/vendor/ghc-libs/libpcre.so.1 $WORKING_HOME/vendor/ghc-libs/libpcre.so

install_prebuilt "happy" "1.19.2"
install_prebuilt "alex" "3.1.3"

export C_INCLUDE_PATH=$WORKING_HOME/vendor/ghc-includes:/usr/include:$C_INCLUDE_PATH
export LIBRARY_PATH=$WORKING_HOME/vendor/ghc-libs:/usr/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=$LIBRARY_PATH
export PATH=$WORKING_HOME/vendor/ghc-$GHC_VER/bin:$WORKING_HOME/vendor/cabal-install-$CABAL_VER/bin:$WORKING_HOME/.cabal-sandbox/bin:$PATH

########## cabal-install ###########################################
if [ ! -e $CACHE_DIR/cabal-install-$CABAL_VER ]; then
  S3_CABAL_URL=$S3/heroku-cabal-install-$CABAL_VER.tar.gz
  if curl --output /dev/null --silent --head --fail $S3_CABAL_URL; then
    echo "-----> Installing prebuilt cabal-install $CABAL_VER"
    curl -# -L $S3_CABAL_URL | tar zx -C $WORKING_HOME/vendor
  else
    echo "-----> Could not find prebuilt cabal-install $CABAL_VER"
    if [ ! -e $CACHE_DIR/download/cabal-install-$CABAL_VER ]; then
      CABAL_URL="http://www.haskell.org/cabal/release/cabal-install-$CABAL_VER/cabal-install-$CABAL_VER.tar.gz"
      echo "-----> Downloading cabal-install $CABAL_VER"
      curl -# -L "$CABAL_URL" | tar zx -C $CACHE_DIR/download
    fi

    echo "-----> Installing cabal-install $CABAL_VER"

    cd $CACHE_DIR/download/cabal-install-$CABAL_VER
    export PREFIX=$WORKING_HOME/vendor/cabal-install-$CABAL_VER

    ./bootstrap.sh
  fi

  echo "-----> Caching cabal $CABAL_VER binaries"
  cp -R $WORKING_HOME/vendor/cabal-install-$CABAL_VER $CACHE_DIR
else
  echo "-----> Restoring cached cabal $CABAL_VER binaries"
  cp -R $CACHE_DIR/cabal-install-$CABAL_VER $WORKING_HOME/vendor
fi

########## project build ###########################################

cd $WORKING_HOME
cabal sandbox init

cd $BUILD_DIR
cabal sandbox init --sandbox $WORKING_HOME/.cabal-sandbox

if [ -e $CACHE_DIR/.cabal-sandbox ]; then
  echo "-----> Restoring cached cabal sandbox"
  rm -fr $WORKING_HOME/.cabal-sandbox
  cp -R $CACHE_DIR/.cabal-sandbox $WORKING_HOME
fi

echo "-----> Getting newest list of cabal packages"
cabal update

echo "-----> Installing user application"
cabal configure --disable-library-profiling --disable-executable-profiling --disable-shared
cabal install --only-dependencies
cabal build -j

echo "-----> Caching latest cabal sandbox"
rm -fr $CACHE_DIR/.cabal-sandbox
cp -R $WORKING_HOME/.cabal-sandbox $CACHE_DIR

echo "-----> Making GHC binaries available to Heroku command line"
mkdir -p $BUILD_DIR/vendor
mv $WORKING_HOME/vendor/ghc-libs $BUILD_DIR/vendor
mv $WORKING_HOME/vendor/ghc-includes $BUILD_DIR/vendor # needed?
mv $WORKING_HOME/vendor/ghc-$GHC_VER $BUILD_DIR/vendor
mv $WORKING_HOME/vendor/cabal-install-$CABAL_VER $BUILD_DIR/vendor

echo "-----> Making cabal config available to Heroku command line"
mv $WORKING_HOME/.cabal $BUILD_DIR

echo "-----> Making cabal sandbox available to Heroku command line"
cp -R $WORKING_HOME/.cabal-sandbox $BUILD_DIR
